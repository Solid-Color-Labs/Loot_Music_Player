#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MusicPlayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TrackDB")]
	public partial class LinqToSqlDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTrackTable(TrackTable instance);
    partial void UpdateTrackTable(TrackTable instance);
    partial void DeleteTrackTable(TrackTable instance);
    partial void InsertPlaylistTable(PlaylistTable instance);
    partial void UpdatePlaylistTable(PlaylistTable instance);
    partial void DeletePlaylistTable(PlaylistTable instance);
    partial void InsertPlaylistDetailTable(PlaylistDetailTable instance);
    partial void UpdatePlaylistDetailTable(PlaylistDetailTable instance);
    partial void DeletePlaylistDetailTable(PlaylistDetailTable instance);
    #endregion
		
		public LinqToSqlDataContext() : 
				base(global::MusicPlayer.Properties.Settings.Default.MusicPlayerDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TrackTable> TrackTables
		{
			get
			{
				return this.GetTable<TrackTable>();
			}
		}
		
		public System.Data.Linq.Table<PlaylistTable> PlaylistTables
		{
			get
			{
				return this.GetTable<PlaylistTable>();
			}
		}
		
		public System.Data.Linq.Table<PlaylistDetailTable> PlaylistDetailTables
		{
			get
			{
				return this.GetTable<PlaylistDetailTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Track")]
	public partial class TrackTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Track_Id;
		
		private string _Title;
		
		private string _Album;
		
		private string _Artist;
		
		private long _Duration;
		
		private string _Path;
		
		private string _Image_Path;
		
		private EntitySet<PlaylistDetailTable> _PlaylistDetailTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrack_IdChanging(int value);
    partial void OnTrack_IdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnAlbumChanging(string value);
    partial void OnAlbumChanged();
    partial void OnArtistChanging(string value);
    partial void OnArtistChanged();
    partial void OnDurationChanging(long value);
    partial void OnDurationChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnImage_PathChanging(string value);
    partial void OnImage_PathChanged();
    #endregion
		
		public TrackTable()
		{
			this._PlaylistDetailTables = new EntitySet<PlaylistDetailTable>(new Action<PlaylistDetailTable>(this.attach_PlaylistDetailTables), new Action<PlaylistDetailTable>(this.detach_PlaylistDetailTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Track_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Track_Id
		{
			get
			{
				return this._Track_Id;
			}
			set
			{
				if ((this._Track_Id != value))
				{
					this.OnTrack_IdChanging(value);
					this.SendPropertyChanging();
					this._Track_Id = value;
					this.SendPropertyChanged("Track_Id");
					this.OnTrack_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Album", DbType="VarChar(100)")]
		public string Album
		{
			get
			{
				return this._Album;
			}
			set
			{
				if ((this._Album != value))
				{
					this.OnAlbumChanging(value);
					this.SendPropertyChanging();
					this._Album = value;
					this.SendPropertyChanged("Album");
					this.OnAlbumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Artist", DbType="VarChar(50)")]
		public string Artist
		{
			get
			{
				return this._Artist;
			}
			set
			{
				if ((this._Artist != value))
				{
					this.OnArtistChanging(value);
					this.SendPropertyChanging();
					this._Artist = value;
					this.SendPropertyChanged("Artist");
					this.OnArtistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="BigInt NOT NULL")]
		public long Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="VarChar(200)")]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_Path", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Image_Path
		{
			get
			{
				return this._Image_Path;
			}
			set
			{
				if ((this._Image_Path != value))
				{
					this.OnImage_PathChanging(value);
					this.SendPropertyChanging();
					this._Image_Path = value;
					this.SendPropertyChanged("Image_Path");
					this.OnImage_PathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrackTable_PlaylistDetailTable", Storage="_PlaylistDetailTables", ThisKey="Track_Id", OtherKey="Track_Id")]
		public EntitySet<PlaylistDetailTable> PlaylistDetailTables
		{
			get
			{
				return this._PlaylistDetailTables;
			}
			set
			{
				this._PlaylistDetailTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlaylistDetailTables(PlaylistDetailTable entity)
		{
			this.SendPropertyChanging();
			entity.TrackTable = this;
		}
		
		private void detach_PlaylistDetailTables(PlaylistDetailTable entity)
		{
			this.SendPropertyChanging();
			entity.TrackTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Playlist")]
	public partial class PlaylistTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Playlist_Id;
		
		private string _Title;
		
		private EntitySet<PlaylistDetailTable> _PlaylistDetailTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlaylist_IdChanging(int value);
    partial void OnPlaylist_IdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public PlaylistTable()
		{
			this._PlaylistDetailTables = new EntitySet<PlaylistDetailTable>(new Action<PlaylistDetailTable>(this.attach_PlaylistDetailTables), new Action<PlaylistDetailTable>(this.detach_PlaylistDetailTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Playlist_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Playlist_Id
		{
			get
			{
				return this._Playlist_Id;
			}
			set
			{
				if ((this._Playlist_Id != value))
				{
					this.OnPlaylist_IdChanging(value);
					this.SendPropertyChanging();
					this._Playlist_Id = value;
					this.SendPropertyChanged("Playlist_Id");
					this.OnPlaylist_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlaylistTable_PlaylistDetailTable", Storage="_PlaylistDetailTables", ThisKey="Playlist_Id", OtherKey="Playlist_Id")]
		public EntitySet<PlaylistDetailTable> PlaylistDetailTables
		{
			get
			{
				return this._PlaylistDetailTables;
			}
			set
			{
				this._PlaylistDetailTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlaylistDetailTables(PlaylistDetailTable entity)
		{
			this.SendPropertyChanging();
			entity.PlaylistTable = this;
		}
		
		private void detach_PlaylistDetailTables(PlaylistDetailTable entity)
		{
			this.SendPropertyChanging();
			entity.PlaylistTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Playlist_Detail")]
	public partial class PlaylistDetailTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Playlist_Detail_Id;
		
		private int _Playlist_Id;
		
		private int _Track_Id;
		
		private EntityRef<PlaylistTable> _PlaylistTable;
		
		private EntityRef<TrackTable> _TrackTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlaylist_Detail_IdChanging(int value);
    partial void OnPlaylist_Detail_IdChanged();
    partial void OnPlaylist_IdChanging(int value);
    partial void OnPlaylist_IdChanged();
    partial void OnTrack_IdChanging(int value);
    partial void OnTrack_IdChanged();
    #endregion
		
		public PlaylistDetailTable()
		{
			this._PlaylistTable = default(EntityRef<PlaylistTable>);
			this._TrackTable = default(EntityRef<TrackTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Playlist_Detail_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Playlist_Detail_Id
		{
			get
			{
				return this._Playlist_Detail_Id;
			}
			set
			{
				if ((this._Playlist_Detail_Id != value))
				{
					this.OnPlaylist_Detail_IdChanging(value);
					this.SendPropertyChanging();
					this._Playlist_Detail_Id = value;
					this.SendPropertyChanged("Playlist_Detail_Id");
					this.OnPlaylist_Detail_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Playlist_Id", DbType="Int NOT NULL")]
		public int Playlist_Id
		{
			get
			{
				return this._Playlist_Id;
			}
			set
			{
				if ((this._Playlist_Id != value))
				{
					if (this._PlaylistTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlaylist_IdChanging(value);
					this.SendPropertyChanging();
					this._Playlist_Id = value;
					this.SendPropertyChanged("Playlist_Id");
					this.OnPlaylist_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Track_Id", DbType="Int NOT NULL")]
		public int Track_Id
		{
			get
			{
				return this._Track_Id;
			}
			set
			{
				if ((this._Track_Id != value))
				{
					if (this._TrackTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrack_IdChanging(value);
					this.SendPropertyChanging();
					this._Track_Id = value;
					this.SendPropertyChanged("Track_Id");
					this.OnTrack_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlaylistTable_PlaylistDetailTable", Storage="_PlaylistTable", ThisKey="Playlist_Id", OtherKey="Playlist_Id", IsForeignKey=true)]
		public PlaylistTable PlaylistTable
		{
			get
			{
				return this._PlaylistTable.Entity;
			}
			set
			{
				PlaylistTable previousValue = this._PlaylistTable.Entity;
				if (((previousValue != value) 
							|| (this._PlaylistTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlaylistTable.Entity = null;
						previousValue.PlaylistDetailTables.Remove(this);
					}
					this._PlaylistTable.Entity = value;
					if ((value != null))
					{
						value.PlaylistDetailTables.Add(this);
						this._Playlist_Id = value.Playlist_Id;
					}
					else
					{
						this._Playlist_Id = default(int);
					}
					this.SendPropertyChanged("PlaylistTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrackTable_PlaylistDetailTable", Storage="_TrackTable", ThisKey="Track_Id", OtherKey="Track_Id", IsForeignKey=true)]
		public TrackTable TrackTable
		{
			get
			{
				return this._TrackTable.Entity;
			}
			set
			{
				TrackTable previousValue = this._TrackTable.Entity;
				if (((previousValue != value) 
							|| (this._TrackTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrackTable.Entity = null;
						previousValue.PlaylistDetailTables.Remove(this);
					}
					this._TrackTable.Entity = value;
					if ((value != null))
					{
						value.PlaylistDetailTables.Add(this);
						this._Track_Id = value.Track_Id;
					}
					else
					{
						this._Track_Id = default(int);
					}
					this.SendPropertyChanged("TrackTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
